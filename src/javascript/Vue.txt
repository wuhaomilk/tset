1.vue创建
 new Vue({
 //选项
 })
 
2.数据与方法
 它将 data 对象中的所有的属性加入到 Vue 的响应式系统中。
 当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值
 
3.Vue实例本身的属性与方法，加上前缀$，
 以便与用户定义的属性区分
 
4.模板语法:“Mustache”语法 (双大括号) 
 4.1插值
 4.1.1插值-文本
  <span>Message: {{ msg }}</span> //msg发生变化，插值处内容随之改变
  <span v-once>这个将不会改变: {{ msg }}</span> //v-once 一次性插值，msg变化，插值处不更新
 4.1.2插值-原始HTML
  <p>Using mustaches: {{ rawHtml }}</p>
  <p>Using v-html directive: <span v-html="rawHtml"></span></p>
 4.1.3插值-javascript表达式
  <span s>{{ "工号"+item.work_id }}</span>
  每个绑定只能包含单个表达式
  模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。
  你不应该在模板表达式中试图访问用户定义的全局变量。
 4.2指令
  指令 (Directives) 是带有 v- 前缀的特殊特性。
  指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM
 4.2.1动态参数：可以用方括号括起来的 JavaScript 表达式作为一个指令的参数
  <a v-bind:[attributeName]="url"> ... </a>
 4.2.2动态参数表达式有一些语法约束，
  例如空格和引号：<a v-bind:['foo' + bar]="value"> ... </a> //造成编译警告
  大写键名：<a v-bind:[someAttr]="value"> ... </a>  //自动转化为小写，someattr
 4.2.3修饰符
  以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定
 4.4缩写
  v-on
  缩写：(@) 
  v-bind
  缩写：(:)
  用法：动态地绑定一个或多个特性，或一个组件 prop 到表达式
  
5计算属性
 5.1将模板中复杂的逻辑表达式封装成函数，函数定义在computed组件中
 5.2我们可以将同一函数定义为一个方法（methods组件中）
 5.3侦听属性：watch
  当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。
 5.4 计算属性VS计算方法
  计算属性:是基于它们的响应式依赖进行缓存的，只要message不发生改变，
  触发后会返回之前计算的结果，不会再次执行函数
  计算方法:调用方法将总会再次执行函数
  
6.key管理可重复的元素
  两个元素是完全独立的，不要复用它们。只需添加一个具有唯一值的key属性

 
 
 
 
 
 