1.动态路由匹配
  一个“路径参数”使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 this.$route.params
2.响应路由参数的变化（/user/:name）
  当使用路由参数时，例如从 /user/foo 导航到 /user/bar，原来的组件实例会被复用.
  不过，这也意味着组件的生命周期钩子不会再被调用。
  复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch (监测变化) $route 对象
3.嵌套路由
  要在嵌套的出口中渲染组件，需要在 VueRouter 的参数中使用 children
4.编程式导航
  4.1router.push:
    // 字符串
	router.push('/home')

	// 对象
	router.push({ path: '/home' })

	// 命名的路由
	router.push({ name: 'user', params: { userId: '123' }})

	// 带查询参数，变成 /register?plan=private
	router.push({ path: 'register', query: { plan: 'private' }})
	注意：如果提供了 path，params 会被忽略
	const userId = '123'
	router.push({ name: 'user', params: { userId }}) // -> /user/123
	router.push({ path: `/user/${userId}` }) // -> /user/123	
	router.push({ path: '/user', params: { userId }}) // -> /user   // 这里的 params 不生效
  4.2router.replace;
  4.3router.go:
5.导航守卫
  5.1全局前置守卫：router.beforeEach
  router.beforeEach((to, from, next) => {
  // ...
  })
  to:Router即将要进入的目标路由对象
  from:Router正要离开的路由
  next:Function,一定要调用该方法来resolve这个钩子
    next()进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。
	next(false)中断当前的导航。如果浏览器的 URL 改变了 ，那么 URL 地址会重置到 from 路由对应的地址.
	next('/')或者next({path：'/'})跳转到新的地址
	next(error)
  5.2全局后置钩子，不会调用next
  router.afterEach((to, from) => {
  // ...
  })
6.路由元信息
   
  